@model MvcEditorModel
@{
    EntityExtension.EnumItem[] items;
    if (Model.Metadata.ClrType.IsGenericType)
    {
        items = Html.EnumAnalyze(Model.Metadata.ClrType.GetGenericArguments()[0]);
    }
    else
    {
        items = Html.EnumAnalyze(Model.Metadata.ClrType);
    }
}
@if (Model.Metadata.ClrType.GetCustomAttributes(typeof(FlagsAttribute), true).Length == 0)
{
    <div class="input-control select">
        <select id="@Model.Metadata.ClrName" name="@Model.Metadata.ClrName">
            @if (Model.Metadata.ClrType.IsGenericType)
            {
                <option value="" @Html.Raw(Model.Value == null ? " selected=\"selected\"" : "")></option>
            }
            @for (int i = 0; i < items.Length; i++)
            {
                <option value="@items[i].Value" @Html.Raw(items[i].Value == (int)Model.Value ? " selected=\"selected\"" : "")>@items[i].Name</option>
            }
        </select>
    </div>
}
else
{
    EnumConverter converter = new EnumConverter(Model.Metadata.ClrType);
    <div id="@Model.Metadata.ClrName">
        @for (int i = 0; i < items.Length; i++)
        {
            <div class="input-control checkbox">
                <label>
                    <input type="checkbox" value="@items[i].Value" @Html.Raw(((dynamic)Model.Value).HasFlag((Enum)Enum.ToObject(Model.Metadata.ClrType, items[i].Value)) ? " checked=\"checked\"" : "") />
                    <span class="check"></span>
                    @items[i].Name
                </label>
            </div>
        }
    </div>
    <input type="hidden" id="@(Model.Metadata.ClrName)_Value" name="@Model.Metadata.ClrName" value="@((int)Model.Value)" />
    <script type="text/javascript">
        $(function () {
            var value = $('#@(Model.Metadata.ClrName)_Value');
            var checkbox = $('#@Model.Metadata.ClrName').find(':checkbox');
            checkbox.click(function () {
                var num = 0;
                checkbox.each(function (index, element) {
                    if (element.checked)
                        num += new Number(element.value);
                });
                value.val(num);
            });
        })
    </script>
}